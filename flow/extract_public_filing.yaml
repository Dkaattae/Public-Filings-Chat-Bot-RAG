id: company_public_filing_business_section
namespace: edgar
description: |
  the goal is to extract text from 10K files of NASDAQ 100 companies into json format.
  step1, find cik ticker table if not exists. get cik from this table
  step2, curl company submission in json format and save it, name it with company name and date processed
  step3, find the latest file from submission.json. return file accession number
  step4, request document index from cik and accession number. 
  step5, find the document content file from the index in .htm
  step6, request document text, return full document in html
  step7, find sections, return url with href. 
  step8, extract text between first section to second section. append to json list
  step9, combine json list for all form type and all companies


inputs:
  - id: ticker
    type: STRING
    displayName: "ticker"
    defaults: "AAPL"

  - id: file_type
    type: SELECT
    displayName: Select file type
    values: ["10-K", "10-Q", "8-K"]
    defaults: "10-K"
  
  - id: year
    type: SELECT
    displayName: Select Year
    values: [2023, 2024, 2025]
    defaults: 2024

variables:
  submission_file: "CIK{{ outputs.get_cik.vars.CIK }}.json"
  gcs_file: "gs://{{kv('GCP_BUCKET_NAME')}}/business_section/{{vars.section_file}}"
  text_data_by_section: "{{ outputs.get_text_by_section.outputFiles[inputs.ticker ~ '_' ~ inputs.file_type ~ 'content.json'] }}"

tasks:
  - id: set_label
    type: io.kestra.plugin.core.execution.Labels
    labels:
      file_type: "{{inputs.file_type}}"
      ticker: "{{inputs.ticker}}"

  - id: log_inputs
    type: io.kestra.plugin.core.log.Log
    message: "{{ inputs.ticker }}"

  # step 1
  - id: get_cik
    type: io.kestra.plugin.scripts.python.Commands
    namespaceFiles:
      enabled: true
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
    containerImage: python:slim
    warningOnStdErr: false
    beforeCommands:
      - pip install pandas kestra
    commands:
      - python get_cik.py "{{inputs.ticker}}"
    disabled: false

  # step 2
  - id: extract
    type: io.kestra.plugin.core.http.Download
    uri: https://data.sec.gov/submissions/CIK{{ outputs.get_cik.vars.CIK }}.json
    method: GET
    contentType: application/json
    headers:
      User-Agent: xchencws@citibank.com
    disabled: false

  - id: print_output_file_uri
    type: io.kestra.plugin.core.log.Log
    message: "{{ outputs.extract.uri }}"
  - id: print_gcs_location
    type: io.kestra.plugin.core.log.Log
    message: "gs://{{kv('GCP_BUCKET_NAME')}}/submission_file/CIK{{ outputs.get_cik.vars.CIK }}.json"
    
  - id: upload_submission_file_to_gcs
    type: io.kestra.plugin.gcp.gcs.Upload
    from: "{{ outputs.extract.uri }}"
    to: "gs://{{kv('GCP_BUCKET_NAME')}}/submission_file/CIK{{ outputs.get_cik.vars.CIK }}.json"
    disabled: false
  
  # step 3-8
  - id: get_text_by_section
    type: io.kestra.plugin.scripts.python.Commands
    namespaceFiles:
      enabled: true
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
    containerImage: python:slim
    warningOnStdErr: false
    beforeCommands:
      - pip install pandas kestra requests BeautifulSoup4 
    inputFiles:
      CIK.json: "{{ outputs.extract.uri }}"
    outputFiles:
      - "*.json"
    commands:
      - python extract_text.py "{{ outputs.get_cik.vars.CIK }}" "{{ inputs.ticker}}" "{{ inputs.file_type }}" "{{ inputs.year }}" "{{ outputs.extract.uri }}"
    disabled: false

  # step 9 upload json to AWS
  # !!!
  - id: upload_extracted_txt_to_gcs
    type: io.kestra.plugin.gcp.gcs.Upload
    from: "{{ render(vars.business_section_data) }}"
    to: "{{ render(vars.gcs_file) }}"

  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
    description: If you'd like to explore Kestra outputs, disable it.
    disabled: false
            
pluginDefaults: # !!!
  - type: io.kestra.plugin.gcp
    values:
      serviceAccount: "{{kv('GCP_SERVICE_ACCOUNT')}}"
      projectId: "{{kv('GCP_PROJECT_ID')}}"
      location: "{{kv('GCP_LOCATION')}}"
      bucket: "{{kv('GCP_BUCKET_NAME')}}"